import{v as l,r as d,y as i,w as n,q as p,z as u,m as f,A as s,B as y}from"./firebase-oRQd-T1V.js";import{p as c}from"./index-CCbUoBqx.js";import"./vendor-CDaM45aE.js";import"./router-ClepU2oc.js";const r="bookings";async function w(){try{const t=l(d(c,r),i("status","==","confirmed"),n("date","asc"),n("time","asc"));return(await p(t)).docs.map(a=>({id:a.id,...a.data()}))}catch(t){throw(t==null?void 0:t.code)==="permission-denied"?console.warn("Firebase: Permessi insufficienti per leggere le prenotazioni. Verifica le regole Firestore e l'autenticazione."):(t==null?void 0:t.code)==="failed-precondition"?console.warn("Firebase: Indici mancanti o configurazione incompleta."):(t==null?void 0:t.code)==="unavailable"?console.warn("Firebase: Servizio non disponibile. Verifica la connessione."):console.warn("Errore caricamento prenotazioni pubbliche (cloud):",t),t}}async function g(t){try{const e=new Date().toISOString().split("T")[0],a=l(d(c,r),i("createdBy","==",t),i("status","==","confirmed"),i("date",">=",e),n("date","asc"),n("time","asc"));return(await p(a)).docs.map(o=>({id:o.id,...o.data()}))}catch(e){return(e==null?void 0:e.code)!=="permission-denied"&&(e==null?void 0:e.code)!=="failed-precondition"&&console.warn("Errore caricamento prenotazioni attive:",e),[]}}async function S(t){try{const e=new Date().toISOString().split("T")[0],a=l(d(c,r),i("createdBy","==",t),i("date","<",e),n("date","desc"),n("time","desc"));return(await p(a)).docs.map(o=>({id:o.id,...o.data()}))}catch(e){return(e==null?void 0:e.code)!=="permission-denied"&&(e==null?void 0:e.code)!=="failed-precondition"&&console.warn("Errore caricamento storico prenotazioni:",e),[]}}async function A(t,e){try{const a={courtId:t.courtId,courtName:t.courtName,date:t.date,time:t.time,duration:t.duration,lighting:t.lighting||!1,heating:t.heating||!1,price:t.price,bookedBy:(e==null?void 0:e.displayName)||(e==null?void 0:e.email)||"Anonimo",userEmail:e==null?void 0:e.email,userPhone:t.userPhone||"",players:t.players||[],notes:t.notes||"",status:"confirmed",createdBy:(e==null?void 0:e.uid)||null,createdAt:s(),updatedAt:s()};return{id:(await y(d(c,r),a)).id,...a,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()}}catch(a){throw console.error("Errore creazione prenotazione:",a),new Error("Impossibile creare la prenotazione. Riprova più tardi.")}}async function E(t,e){try{return await u(f(c,r,t),{status:"cancelled",cancelledAt:s(),cancelledBy:(e==null?void 0:e.uid)||null,updatedAt:s()}),!0}catch(a){throw console.error("Errore cancellazione prenotazione:",a),new Error("Impossibile cancellare la prenotazione. Riprova più tardi.")}}async function v(){return(await w()).map(e=>({id:e.id,courtId:e.courtId,courtName:e.courtName,date:e.date,time:e.time,duration:e.duration,status:e.status}))}export{E as cancelCloudBooking,A as createCloudBooking,v as getPublicBookings,g as loadActiveUserBookings,S as loadBookingHistory,w as loadPublicBookings};
