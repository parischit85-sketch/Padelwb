const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-rbtMlVIM.js","assets/index-N3-yNM-x.js","assets/vendor-CDaM45aE.js","assets/firebase-oRQd-T1V.js","assets/router-ClepU2oc.js","assets/index-CQfFV5PZ.css","assets/index-C_r86LdB.js","assets/index-B_5_v2s0.js"])))=>i.map(i=>d[i]);
import{_ as c}from"./index-N3-yNM-x.js";import"./vendor-CDaM45aE.js";import"./firebase-oRQd-T1V.js";import"./router-ClepU2oc.js";let t=null,a=null,n=null;const f=async()=>{if(typeof window<"u")try{n=(await c(()=>import("./index-C_r86LdB.js"),[])).Capacitor,t=(await c(()=>import("./index-rbtMlVIM.js"),__vite__mapDeps([0,1,2,3,4,5,6]))).LocalNotifications,a=(await c(()=>import("./index-B_5_v2s0.js"),__vite__mapDeps([7,6]))).PushNotifications}catch{console.warn("Notifications: Could not load native modules, running in web mode")}};class u{constructor(){this.isInitialized=!1,this.permissionGranted=!1,this.importsReady=!1}async initialize(){if(this.importsReady||(await f(),this.importsReady=!0),this.isInitialized||!(n!=null&&n.isNativePlatform())){console.log("Notifications: Skipping - not native platform or already initialized");return}try{console.log("Notifications: Initializing...");const i=await t.checkPermissions();console.log("Existing local permissions:",i);let e=i;i.display!=="granted"&&(console.log("Requesting local notifications permissions..."),e=await t.requestPermissions(),console.log("Local notifications permission result:",e));const o=await a.checkPermissions();console.log("Existing push permissions:",o);let s=o;o.receive!=="granted"&&(console.log("Requesting push notifications permissions..."),s=await a.requestPermissions(),console.log("Push notifications permission result:",s)),this.permissionGranted=e.display==="granted"||s.receive==="granted",console.log("Notifications permissions granted:",this.permissionGranted),await this.setupPushListeners(),this.permissionGranted&&(console.log("Registering for push notifications..."),await a.register()),this.isInitialized=!0,console.log("Notification service initialized successfully")}catch(i){console.error("Error initializing notifications:",i),this.isInitialized=!0,this.permissionGranted=!1}}async setupPushListeners(){await a.addListener("registration",i=>{console.log("Push registration success, token: "+i.value)}),await a.addListener("registrationError",i=>{console.error("Error on registration: "+JSON.stringify(i))}),await a.addListener("pushNotificationReceived",i=>{console.log("Push notification received: ",i)}),await a.addListener("pushNotificationActionPerformed",i=>{console.log("Push notification action performed: ",i.actionId,i.inputValue)})}async scheduleBookingReminder(i,e=30){if(this.importsReady||await this.initialize(),!this.permissionGranted||!t){console.log("Notifications permission not granted or not available");return}const o=new Date(i.datetime);if(o.setMinutes(o.getMinutes()-e),o<=new Date){console.log("Cannot schedule notification in the past");return}try{return await t.schedule({notifications:[{title:"🏓 Promemoria Prenotazione",body:`La tua prenotazione per il ${i.field} è tra ${e} minuti!`,id:Date.now(),schedule:{at:o},sound:"default",attachments:[],actionTypeId:"",extra:{type:"booking_reminder",bookingId:i.id}}]}),console.log(`Notification scheduled for ${o}`),!0}catch(s){return console.error("Error scheduling notification:",s),!1}}async sendBookingConfirmation(i){if(this.importsReady||await this.initialize(),!this.permissionGranted||!t){console.log("Notifications permission not granted or not available");return}try{return await t.schedule({notifications:[{title:"✅ Prenotazione Confermata",body:`Campo ${i.field} prenotato per ${new Date(i.datetime).toLocaleString("it-IT")}`,id:Date.now(),schedule:{at:new Date(Date.now()+1e3)},sound:"default",attachments:[],actionTypeId:"",extra:{type:"booking_confirmed",bookingId:i.id}}]}),console.log("Booking confirmation notification sent"),!0}catch(e){return console.error("Error sending confirmation notification:",e),!1}}async notifyAddedToMatch(i,e){if(this.importsReady||await this.initialize(),!this.permissionGranted||!t){console.log("Notifications permission not granted or not available");return}try{return await t.schedule({notifications:[{title:"🎾 Aggiunto alla Partita!",body:`${e}, sei stato aggiunto alla partita di ${i.date} alle ${i.time}. Campo: ${i.field}`,id:`added_${i.id}_${Date.now()}`,schedule:{at:new Date(Date.now()+1e3)},sound:"default",attachments:[],actionTypeId:"",extra:{type:"added_to_match",matchId:i.id,action:"view_match"}}]}),console.log(`Notifica "aggiunto alla partita" inviata per ${e}`),!0}catch(o){return console.error("Errore nell'invio della notifica di aggiunta:",o),!1}}async scheduleMatchReminder(i,e=120){if(this.importsReady||await this.initialize(),!this.permissionGranted||!t){console.log("Notifications permission not granted or not available");return}const o=new Date(`${i.date} ${i.time}`),s=new Date(o.getTime()-e*60*1e3);if(s<=new Date){console.log("Cannot schedule match reminder in the past");return}try{return await t.schedule({notifications:[{title:"⏰ Partita tra 2 ore!",body:`La tua partita inizia alle ${i.time} al ${i.field}. Preparati! ⚽`,id:`reminder_${i.id}`,schedule:{at:s},sound:"default",attachments:[],actionTypeId:"",extra:{type:"match_reminder",matchId:i.id,action:"view_match"}}]}),console.log(`Promemoria partita programmato per ${s.toLocaleString("it-IT")} (partita: ${i.id})`),!0}catch(d){return console.error("Errore nella programmazione del promemoria partita:",d),!1}}async cancelMatchNotifications(i){var e;if(this.importsReady||await this.initialize(),!t)return console.log("LocalNotifications not available"),!1;try{await t.cancel({notifications:[{id:`reminder_${i}`}]});const o=await t.getPending();for(const s of o.notifications)((e=s.extra)==null?void 0:e.matchId)===i&&await t.cancel({notifications:[{id:s.id}]});return console.log(`Tutte le notifiche per la partita ${i} sono state cancellate`),!0}catch(o){return console.error("Errore nella cancellazione delle notifiche della partita:",o),!1}}async cancelAllNotifications(){if(this.importsReady||await this.initialize(),!t){console.log("LocalNotifications not available");return}try{await t.cancel({notifications:[]}),console.log("All notifications cancelled")}catch(i){console.error("Error cancelling notifications:",i)}}async getPendingNotifications(){if(this.importsReady||await this.initialize(),!t)return console.log("LocalNotifications not available"),[];try{const i=await t.getPending();return console.log("Pending notifications:",i.notifications),i.notifications}catch(i){return console.error("Error getting pending notifications:",i),[]}}async checkPermissions(){if(this.importsReady||await this.initialize(),!(n!=null&&n.isNativePlatform())||!t||!a)return console.log("Not on native platform or modules not available"),!1;try{const i=await t.checkPermissions(),e=await a.checkPermissions();return console.log("Local permissions:",i),console.log("Push permissions:",e),i.display==="granted"||e.receive==="granted"}catch(i){return console.error("Error checking permissions:",i),!1}}async requestPermissions(){if(this.importsReady||await this.initialize(),!(n!=null&&n.isNativePlatform())||!t||!a)return console.log("Not on native platform or modules not available"),!1;try{const i=await t.requestPermissions(),e=await a.requestPermissions();console.log("Requested local permissions:",i),console.log("Requested push permissions:",e);const o=i.display==="granted"||e.receive==="granted";return this.permissionGranted=o,o}catch(i){return console.error("Error requesting permissions:",i),!1}}async sendTestNotification(){if(this.importsReady||await this.initialize(),!(n!=null&&n.isNativePlatform())||!t){alert(`🧪 Test Notification
(Solo su dispositivo mobile nativo)`);return}if(!this.permissionGranted)throw new Error("Permessi notifiche non concessi");try{return await t.schedule({notifications:[{title:"🧪 Test Notifica",body:`Notifica di test inviata alle ${new Date().toLocaleTimeString("it-IT")} ✅`,id:`test_${Date.now()}`,schedule:{at:new Date(Date.now()+1e3)},sound:"default",attachments:[],actionTypeId:"",extra:{type:"test_notification"}}]}),console.log("Test notification sent"),!0}catch(i){throw console.error("Error sending test notification:",i),i}}async scheduleTestNotification(){if(this.importsReady||await this.initialize(),!(n!=null&&n.isNativePlatform())||!t){alert(`⏰ Test Scheduled Notification
(Solo su dispositivo mobile nativo)`);return}if(!this.permissionGranted)throw new Error("Permessi notifiche non concessi");try{const i=new Date(Date.now()+1e4);return await t.schedule({notifications:[{title:"⏰ Test Programmazione",body:`Notifica programmata ricevuta! 🎯 Era per le ${i.toLocaleTimeString("it-IT")}`,id:`scheduled_test_${Date.now()}`,schedule:{at:i},sound:"default",attachments:[],actionTypeId:"",extra:{type:"scheduled_test"}}]}),console.log(`Scheduled test notification for ${i}`),!0}catch(i){throw console.error("Error scheduling test notification:",i),i}}}const r=new u,w=()=>r.checkPermissions(),y=()=>r.requestPermissions(),P=()=>r.sendTestNotification(),N=()=>r.scheduleTestNotification();export{w as checkPermissions,r as default,r as notificationService,y as requestPermissions,N as scheduleTestNotification,P as sendTestNotification};
